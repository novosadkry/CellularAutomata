#pragma kernel GameUpdate
#pragma kernel InputUpdate

float2 cell_scale;
uint2 grid_size;

bool fill;
uint2 fill_pos;
float fill_radius;

RWStructuredBuffer<uint> CellsIn;
RWStructuredBuffer<uint> CellsOut;
RWStructuredBuffer<uint> CellsSwap;
RWTexture2D<float4> Result;

uint2 get_coord_from_index(uint index)
{
    uint2 coord;
    coord.x = index / grid_size.y;
    coord.y = index % grid_size.y;

    return coord;
}

uint get_index_from_coord(uint2 coord)
{
    return coord.x * grid_size.y + coord.y;
}

int count_neighbours(uint index)
{
    int count = 0;
    
    for (int x = -1; x <= 1; x++)
    {
        for (int y = -1; y <= 1; y++)
        {
            if (x == 0 && y == 0)
                continue;

            uint2 coord = get_coord_from_index(index);
            coord.x += x;
            coord.y += y;

            if (coord.x < 0 || coord.x >= grid_size.x) continue;
            if (coord.y < 0 || coord.y >= grid_size.y) continue;

            count += CellsIn[get_index_from_coord(coord)];
        }
    }

    return count;
}

[numthreads(16,16,1)]
void GameUpdate(uint3 id : SV_DispatchThreadID)
{
    uint2 coord;
    
    coord.x = floor(id.x / cell_scale.x);
    coord.y = floor(id.y / cell_scale.y);

    const uint index = get_index_from_coord(coord);
    float4 color = float4(0.0, 0.0, 0.0, 1.0);

    const int n = count_neighbours(index);

    const int ge2_le3 =
        (1.0 - max(sign(2 - n), 0.0)) *
        (1.0 - max(sign(n - 3), 0.0)) *
        CellsIn[index];

    const int eq_3 =
        1.0 - abs(sign(n - 3));

    const int val = min(ge2_le3 + eq_3, 1.0);
    color.xyz = float3(1.0, 1.0, 1.0) * val;

    CellsOut[index] = val;
    CellsSwap[index] = val;

    Result[id.xy] = color;
}

[numthreads(16,16,1)]
void InputUpdate(uint3 id : SV_DispatchThreadID)
{
    uint2 coord;

    coord.x = floor(id.x / cell_scale.x);
    coord.y = floor(id.y / cell_scale.y);

    const uint index = get_index_from_coord(coord);
    float4 color = float4(0.0, 0.0, 0.0, 1.0);

    // Distance from square
    const float dx = abs(int(coord.x - fill_pos.x));
    const float dy = abs(int(coord.y - fill_pos.y));
    const float dist = max(dx, dy);

    const int le_radius = 1.0 - max(sign(dist - fill_radius), 0.0);

    const int val =
        max(le_radius * fill, CellsIn[index]) * fill +
        CellsIn[index] * (1.0 - le_radius) * (1.0 - fill);

    color.xyz = float3(1.0, 1.0, 1.0) * val;

    CellsOut[index] = val;
    CellsSwap[index] = val;

    Result[id.xy] = color;
}
